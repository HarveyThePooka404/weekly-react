generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  username      String?
  password      String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  activities    String[]
  days          Day[]
  projects      Project[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Day {
  id         String     @id @default(uuid())
  date       String
  userId     String
  quality    DayQuality
  status     DayStatus
  weekNumber Int
  textDetail String?
  activities String[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id     String @id @default(uuid())
  userId String
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]
}

model Task {
  id        String     @id @default(uuid())
  projectId String
  status    TaskStatus
  title     String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum DayQuality {
  GOOD
  BAD
}

enum DayStatus {
  DONE
  TOBEDONE
  EXPIRED
}

enum TaskStatus {
  DONE
  ONGOING
  EXPERIED
  TOBEDONE
}
